parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AzureSubscription
    type: string

steps:
  - task: PowerShell@2
    name: Deployment
    displayName: "terraform deployment"
    inputs:
      targetType: filePath
      filePath: '$(Pipeline.Workspace)/terraformartifact/terraform_conditional_run.ps1'
      arguments: '-deploymentResourceGroupName $(DeploymentResourceGroupName) -deploymentStorageAccountName $(DeploymentStorageAccountName) -workSpace $(Environment) -continueEvenIfResourcesAreGettingDestroyed $${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }} '
    env:
      ARM_CLIENT_ID: $(TERRAFORM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(TERRAFORM-CLIENT-SECRET)
      ARM_TENANT_ID: $(TERRAFORM-TENANT-ID)
      ARM_SUBSCRIPTION_ID: $(TERRAFORM-SUBSCRIPTION-ID)
      TF_VAR_allowed_ips: $(whiteListedIps)
      TF_VAR_spoke_rg: $(spokeRG)
      TF_VAR_spoke_vnet_name: $(spokeVnetName)
      TF_VAR_spoke_subnet_name: $(spokeSubnetName)
      TF_VAR_agent_rg: $(agentRG)
      TF_VAR_agent_vnet_name: $(agentVnetName)
      TF_VAR_agent_subnet_name: $(agentSubnetName)
      TF_VAR_agent_subscription_id: $(agentSubscriptionId)

  - task: FileTransform@2
    displayName: "File Transform: website config"
    inputs:
      folderPath: "$(Pipeline.Workspace)/AngularApp/ukho-fileshareservice-ui"
      xmlTransformationRules:
      jsonTargetFiles: '**/appconfig.json'

  - task: AzureCLI@2
    displayName: "Website deployment"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage blob delete-batch -s '$web' --account-name $(website_storage_account_name)
        az storage blob upload-batch -d '$web' --account-name $(website_storage_account_name) -s "$(Pipeline.Workspace)/AngularApp/ukho-fileshareservice-ui"

  - task: PowerShell@2
    displayName: "Check the status of Service"
    inputs:
      targetType: filePath
      filePath: "$(Pipeline.Workspace)/terraformartifact/checkwebsitestatus.ps1"
      arguments: "-fssUIWebUrl $(SERVICE_DNS_URL) -waitTimeInMinute $(waitTimeInMinute)"
