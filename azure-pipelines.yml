name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: $(DeploymentPool)

variables:
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell:1.0.2"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"
  - name: WindowPool
    value: "NautilusBuild"
  - name: coverityPool
    value: NautilusBuild
  - group: Covscan-vars

resources:
  repositories:
    - repository: covscan
      type: github
      name: UKHO/coverityscan-buildtemplates
      endpoint: UKHO
      ref: refs/heads/master

stages:
  - stage: CoverityScan
    displayName: "Coverity Scan"
    pool:
      name: $(coverityPool)
      demands:
      - Agent.Name -equals HTFSPRDUAG02-Melanie-A01
    jobs:
    - job: Coverity
      workspace:
        clean: all
      steps:
        - checkout: self
          submodules: recursive
        - checkout: covscan
        - template: typescript-cov.yml@covscan
          parameters:
            CovHostUrl: "$(CovHostUrl)"
            CovUser: "$(CovUser)"
            CovPwd: "$(CovPwd)"
            StreamName: "file-share-service-ui"
            BuildCommand: "run build"
            StripPath: $(Build.Repository.LocalPath)/file-share-service-ui
            CoverityScanPath: $(Build.Repository.LocalPath)/coverityscan-buildtemplates
            FsCaptureSearch: $(Build.Repository.LocalPath)/file-share-service-ui/src

  - stage: Perfrom_Build_Test_Publish
    displayName: "Build (Build ,test and publish artifact )"
    dependsOn: []
    jobs:
     - job: Dependencychecker
       pool:
        name: $(WindowPool)
        demands:
        - Agent.Name -equals HTFSPRDUAG02-Melanie-A01
       displayName: "Dependency checker"
       workspace:
        clean: all
       steps:
          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "UKHO.FileShareService.UI - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

     - job: BuildTestPublish
       dependsOn: Dependencychecker
       pool: $(DeploymentPool)
       container: ${{variables.Container}}
       workspace:
         clean: all # what to clean up before the job runs outputs | resources | all
       displayName: "Build test publish"

       steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci
            displayName: 'npm restore'
          
          - script: |
              npm run build
            displayName: 'npm build'
          
          - script: |
             npm run test:unit
            continueOnError: false
            displayName: 'Unit test with Jest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testRunner: 'JUnit'
              testResultsFiles: 'junit.xml'
              testRunTitle: Unit Test Results
            displayName: 'Publish Unit Test Results'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
              reportDirectory: 'coverage/'

          - task: PublishBuildArtifacts@1
            displayName: "Publish angularapp artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/dist'
              ArtifactName: AngularApp

          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/Deployment'
              ArtifactName: terraformartifact

  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, website deploy)"
    variables:
      - group: "File-Share-Service-UI-Dev-Variables"
    jobs:
      - deployment: DevDeploy
        displayName: "Dev - deploy terraform and website"
        environment: "FSS-Dev"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-Dev-P4052"

      - job: FunctionalTests
        dependsOn: DevDeploy
        pool:
          name: $(WindowPool)
          demands:
          - Agent.Name -equals HTFSPRDUAG02-Melanie-A01
        displayName: "Functional Tests"
        variables: 
         autoTestConfig.url: $[ dependencies.DevDeploy.outputs['DevDeploy.Deployment.website_url']  ]
        workspace:
         clean: all
        steps:
           - checkout: self
           - script: 
              echo "$(autoTestConfig.url)"
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'
              
           - task: CmdLine@2
             inputs:
              script: 'npx playwright install'
             displayName: install browsers for playwright test

           - script: |
              npm run test:auto
             displayName: 'Run Functional Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/FunctionalTests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: Functional Test Results
             displayName: 'Publish Functional Test Results'

      - job: E2ETests
        dependsOn: FunctionalTests
        pool:
          name: $(WindowPool)
          demands:
          - Agent.Name -equals HTFSPRDUAG02-Melanie-A01
        displayName: "End-To-End Tests"
        steps:
           - checkout: self
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             displayName: 'AppSettings Json tranform for E2E Tests Run'
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'
  
           - script: |
              npm run test:e2e
             displayName: 'Run E2E Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/E2ETests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: E2E Test Results
             displayName: 'Publish End-To-End Test Results'

      - job: AccessibilityTests
        dependsOn: E2ETests
        pool:
          name: $(WindowPool)
          demands:
          - Agent.Name -equals HTFSPRDUAG02-Melanie-A01
        displayName: "Accessibility Tests"
        steps:
           - checkout: self
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             displayName: AppSettings Json tranform for Accessibility Test Run
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'
      
           - script: |
              npm run test:a11y
             displayName: 'Run Accessibility Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/AccessibilityTests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: Accessibility Test Results
             displayName: 'Publish Accessibility Test Results'

  - stage: QAdeploy
    displayName: "QAdeploy (inc terraform, website deploy)"
    variables:
      - group: "File-Share-Service-UI-QA-Variables"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: QADeploy
        displayName: "QA - deploy terraform and website"
        environment: "FSS-QA"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform QA"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-QA-P4052"
    
      - job: FunctionalTests
        dependsOn: QAdeploy
        pool: $(WindowPool)
        displayName: "Functional Tests"
        variables: 
         autoTestConfig.url: $[ dependencies.QAdeploy.outputs['QAdeploy.Deployment.website_url']  ]
        workspace:
         clean: all
        steps:
           - checkout: self

           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'

           - script: |
              npm run test:auto
             displayName: 'Run Functional Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/FunctionalTests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: Functional Test Results
             displayName: 'Publish Functional Test Results'

      - job: E2ETests
        dependsOn: FunctionalTests
        pool: $(WindowPool)
        displayName: "End-To-End Tests"
        steps:
           - checkout: self
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             displayName: AppSettings Json tranform for E2E Tests Run
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'
     
           - script: |
              npm run test:e2e
             displayName: 'Run E2E Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/E2ETests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: E2E Test Results
             displayName: 'Publish End-To-End Test Results'

      - job: AccessibilityTests
        dependsOn: E2ETests
        pool: $(WindowPool)
        displayName: "Acccessibility Tests"
        workspace:
         clean: all
        steps:
           - checkout: self
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@2
             displayName: AppSettings Json tranform for Accessibility Test Run
             inputs:
              folderPath: '$(Build.SourcesDirectory)\'
              xmlTransformationRules:
              jsonTargetFiles: 'appSetting.json'
      
           - script: |
              npm run test:a11y
             displayName: 'Run Accessibility Tests'
             workingDirectory: '$(Build.SourcesDirectory)/Tests/AccessibilityTests'

           - task: PublishTestResults@2
             condition: succeededOrFailed()
             inputs:
               testRunner: 'JUnit'
               testResultsFiles: 'junit.xml'
               mergeTestResults: true
               searchFolder:  '$(System.DefaultWorkingDirectory)/'
               testRunTitle: Accessibility Test Results
             displayName: 'Publish Accessibility Test Results'

  - stage: LiveDeploy
    displayName: "Livedeploy (inc terraform, website deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: LiveDeploy
        displayName: "Live - deploy terraform and website"
        environment: "FSS-Live"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform Live"
          - group: "File-Share-Service-UI-Live-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-Live-P4052"
