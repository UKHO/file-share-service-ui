name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: $(DeploymentPool)

variables:
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell:0.15.4"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"
  - name: WindowPool
    value: "NautilusBuild"

stages:
  - stage: Perfrom_Build_Test_Publish
    displayName: "Build (Build ,test and publish artifact )"
    jobs:
     - job: Dependencychecker
       pool: $(WindowPool)
       displayName: "Dependency checker"
       workspace:
        clean: all
       steps:
          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "UKHO.FileShareService.UI - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

     - job: BuildTestPublish
       dependsOn: Dependencychecker
       pool: $(UbuntuPool)
       container: ${{variables.Container}}
       workspace:
         clean: all # what to clean up before the job runs outputs | resources | all
       displayName: "Build test publish"

       steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
             versionSpec: '14.x'
            displayName: 'Install Node.js'

          - script: |
             npm install -g @angular/cli
             npm ci
            displayName: 'npm restore' 
 
          - script: |
             npm run build --prod
            displayName: 'npm build'

          - task: PublishBuildArtifacts@1
            displayName: "Publish angularapp artifacts"
            inputs:
             PathtoPublish: '$(Build.SourcesDirectory)/dist'
             ArtifactName: AngularApp
          
          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
             PathtoPublish: '$(Build.SourcesDirectory)/Deployment'
             ArtifactName: terraformartifact

  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, website deploy)"
    jobs:
      - deployment: DevDeploy
        displayName: "Dev - deploy terraform and website"
        environment: "Ess-Dev"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform Dev"
          - group: "File-Share-Service-UI-Dev-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-Dev-P4052"

  - stage: QAdeploy
    displayName: "QAdeploy (inc terraform, website deploy)"
    jobs:
      - deployment: QADeploy
        displayName: "QA - deploy terraform and website"
        environment: "FSS-QA"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform QA"
          - group: "File-Share-Service-UI-QA-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-QA-P4052"
