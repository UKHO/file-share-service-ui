name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: $(DeploymentPool)

variables:
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell:0.15.4"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"
  - name: WindowPool
    value: "NautilusBuild"

stages:
  - stage: Perfrom_Build_Test_Publish
    displayName: "Build (Build ,test and publish artifact )"
    jobs:
      - job:
        container: ${{variables.Container}}
        workspace:
          clean: all
        displayName: "Build test publish"

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - script: |
              npm install -g @angular/cli
              npm ci
            displayName: 'npm restore'
          
          - script: |
              npm run build --prod
            displayName: 'npm build'
          
          - script: |
             npm install jest jest-preset-angular @types/jest --save-dev
             npm install jest-junit --save-dev
             npm run test:unit -- --reporters=jest-junit --reporters=default --coverage --coverageReporters=cobertura
            continueOnError: false
            displayName: 'Unit test with Jest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testRunner: 'JUnit'
              testResultsFiles: 'junit.xml'
            displayName: 'Publish Unit Test Results'

          - script: |
             npm run test:a11y -- --reporters=jest-junit --reporters=default
            continueOnError: false
            displayName: 'Accessibility Testing'
         
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
              reportDirectory: 'coverage/'

          - task: PublishBuildArtifacts@1
            displayName: "Publish angularapp artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/dist'
              ArtifactName: AngularApp

          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/Deployment'
              ArtifactName: terraformartifact

  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, website deploy)"
    jobs:
      - deployment: DevDeploy
        displayName: "Dev - deploy terraform and website"
        environment: "Ess-Dev"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform Dev"
          - group: "File-Share-Service-UI-Dev-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-Dev-P4052"

      - job: FunctionalTest
        dependsOn: DevDeploy
        pool: $(WindowPool)
        displayName: "Function Test"
        variables: 
         autoTestConfig.url: $[ dependencies.DevDeploy.outputs['DevDeploy.Deployment.website_url']  ]
        workspace:
         clean: all
        steps:
           - checkout: self
           - script: 
              echo "$(autoTestConfig.url)"
           - task: NodeTool@0
             inputs:
              versionSpec: '14.x'
             displayName: 'Install Node.js'

           - script: |
              npm install -g @angular/cli
              npm ci
             displayName: 'npm restore'

           - task: FileTransform@1
             inputs:
              folderPath: '$(Build.SourcesDirectory)\Tests\FunctionalTests'
              fileType: 'json'
              targetFiles: 'appSetting.json'
             
           - script: |
              npm install -D jest jest-playwright-preset playwright
             displayName: 'Install Jest Playwright Dependencies'
             
           - script: |
              npm run test:auto
             displayName: 'Run functional Tests'
     
  - stage: QAdeploy
    displayName: "QAdeploy (inc terraform, website deploy)"
    jobs:
      - deployment: QADeploy
        displayName: "QA - deploy terraform and website"
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
        environment: "FSS-QA"
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "File share service terraform QA"
          - group: "File-Share-Service-UI-QA-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "File-Share-Service-QA-P4052"
